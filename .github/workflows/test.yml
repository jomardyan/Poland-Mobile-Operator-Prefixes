name: Test App Functionalities

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  javascript-tests:
    name: JavaScript Tests (Node.js + Browser)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: javascript/package.json
    
    - name: Install JavaScript dependencies
      working-directory: ./javascript
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: Run JavaScript tests (includes browser module tests)
      working-directory: ./javascript
      run: npm test -- --coverage
    
    - name: Display test summary
      working-directory: ./javascript
      run: |
        echo "✓ Node.js module tests passed"
        echo "✓ Browser module tests passed (v2.0)"
        echo "✓ Ajax and event listener tests passed"
    
    - name: Upload JavaScript coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./javascript/coverage/lcov.info
        flags: javascript
        name: javascript-${{ matrix.node-version }}
        fail_ci_if_error: false

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: python/requirements.txt
    
    - name: Install Python dependencies
      working-directory: ./python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Python tests with unittest
      working-directory: ./python
      run: python -m unittest test_polish_mobile_validator.py -v
    
    - name: Run Python tests with pytest and coverage
      working-directory: ./python
      run: |
        pytest test_polish_mobile_validator.py -v --cov=polish_mobile_validator --cov-report=xml --cov-report=term
    
    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./python/coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [javascript-tests, python-tests]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Verify CSV files exist
      run: |
        echo "Checking CSV files..."
        ls -lh Mobileprefix*.csv
        echo "✓ CSV files found"
    
    - name: Run JavaScript examples
      working-directory: ./javascript
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        node examples.js
    
    - name: Run Python examples
      working-directory: ./python
      run: |
        pip install -r requirements.txt
        python examples.py
    
    - name: Check CSV data integrity
      run: |
        echo "Verifying CSV data integrity..."
        LINES=$(wc -l < Mobileprefix_corrected.csv)
        echo "Total lines in CSV: $LINES"
        if [ $LINES -lt 100 ]; then
          echo "❌ CSV file seems too small"
          exit 1
        fi
        echo "✓ CSV file integrity check passed"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check for duplicate prefixes in CSV
      run: |
        echo "Checking for duplicate prefixes..."
        if [ -f "Mobileprefix_corrected.csv" ]; then
          DUPLICATES=$(cut -d';' -f1 Mobileprefix_corrected.csv | sort | uniq -d | wc -l)
          if [ $DUPLICATES -gt 1 ]; then
            echo "⚠️  Warning: Found $DUPLICATES duplicate prefixes"
          else
            echo "✓ No duplicate prefixes found"
          fi
        fi
    
    - name: Verify project structure
      run: |
        echo "Verifying project structure..."
        test -f "README.md" && echo "✓ README.md exists"
        test -f "RELEASE_NOTES.md" && echo "✓ RELEASE_NOTES.md exists"
        test -f "Mobileprefix.csv" && echo "✓ Mobileprefix.csv exists"
        test -f "Mobileprefix_corrected.csv" && echo "✓ Mobileprefix_corrected.csv exists"
        test -d "javascript" && echo "✓ javascript directory exists"
        test -d "python" && echo "✓ python directory exists"
        test -f "javascript/package.json" && echo "✓ javascript/package.json exists"
        test -f "javascript/polishMobileValidator.js" && echo "✓ polishMobileValidator.js exists"
        test -f "javascript/polishMobileValidatorBrowser.js" && echo "✓ polishMobileValidatorBrowser.js exists (v2.0)"
        test -f "javascript/demo.html" && echo "✓ demo.html exists (v2.0)"
        test -f "python/requirements.txt" && echo "✓ python/requirements.txt exists"
        echo "✓ Project structure verified"
    
    - name: Check file encodings
      run: |
        echo "Checking file encodings..."
        file -i README.md
        file -i Mobileprefix_corrected.csv
        echo "✓ File encodings checked"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [javascript-tests, python-tests, integration-tests, code-quality]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "=========================================="
        echo "Test Summary"
        echo "=========================================="
        echo "✓ JavaScript Tests: ${{ needs.javascript-tests.result }}"
        echo "✓ Python Tests: ${{ needs.python-tests.result }}"
        echo "✓ Integration Tests: ${{ needs.integration-tests.result }}"
        echo "✓ Code Quality: ${{ needs.code-quality.result }}"
        echo "=========================================="
        
        if [ "${{ needs.javascript-tests.result }}" != "success" ] || \
           [ "${{ needs.python-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "❌ Some tests failed"
          exit 1
        fi
        
        echo "✓ All tests passed successfully!"
